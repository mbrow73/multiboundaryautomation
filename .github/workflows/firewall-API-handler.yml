name: API Firewall Request Handler

# This workflow listens for repository_dispatch events to create, update,
# or remove firewall rule requests. It expects the client payload to
# contain the necessary fields as JSON and uses a unified Python helper
# script to build the issue body.

on:
  repository_dispatch:
    types:
      - firewall_request
      - firewall_update
      - firewall_remove

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # Handle new firewall rule requests submitted via the API.
  create_request:
    if: github.event.action == 'firewall_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Capture client payload
        run: |
          # Write the client_payload from the dispatch event to a JSON file.
          echo '${{ toJson(github.event.client_payload) }}' > payload.json

      - name: Build firewall request issue body
        run: |
          # Build a Markdown issue body for a new request using the unified script.
          python3 .github/scripts/firewall_issue_builder.py --mode request --payload payload.json --output issue_body.md

      - name: Create GitHub issue for firewall request
        # Use a personal access token (PAT) for issue creation so that the resulting
        # issue event triggers downstream workflows.  The PAT must be stored
        # in the repository secrets as FIREWALL_API_TOKEN.  Using the default
        # GITHUB_TOKEN will not trigger other workflows due to GitHub's loop
        # prevention; see https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow.
        env:
          GH_TOKEN: ${{ secrets.FIREWALL_API_TOKEN }}
        run: |
          # Compose the issue title from the reqid and create the issue with a label.
          TITLE="Firewall request: ${{ github.event.client_payload.reqid }}"
          # The labels field accepts a comma-separated list; use a single label for this request.
          gh api repos/${{ github.repository }}/issues \
            -f title="$TITLE" \
            -f body="$(cat issue_body.md)" \
            -f labels[]="firewall-request"

  # Handle firewall rule updates submitted via the API.
  update_request:
    if: github.event.action == 'firewall_update'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Capture update payload
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > payload.json

      - name: Build update issue body
        run: |
          python3 .github/scripts/firewall_issue_builder.py --mode update --payload payload.json --output issue_body.md

      - name: Create GitHub issue for update request
        # Use PAT for issue creation so that the update request triggers downstream workflows
        env:
          GH_TOKEN: ${{ secrets.FIREWALL_API_TOKEN }}
        run: |
          TITLE="Firewall rule update request: ${{ github.event.client_payload.new_reqid }}"
          gh api repos/${{ github.repository }}/issues \
            -f title="$TITLE" \
            -f body="$(cat issue_body.md)" \
            -f labels[]="firewall-update-request"

  # Handle firewall rule removals submitted via the API.
  remove_request:
    if: github.event.action == 'firewall_remove'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Capture removal payload
        run: |
          echo '${{ toJson(github.event.client_payload) }}' > payload.json

      - name: Build removal issue body
        run: |
          python3 .github/scripts/firewall_issue_builder.py --mode remove --payload payload.json --output issue_body.md

      - name: Create GitHub issue for removal request
        # Use PAT for issue creation so that the removal request triggers downstream workflows
        env:
          GH_TOKEN: ${{ secrets.FIREWALL_API_TOKEN }}
        run: |
          TITLE="Firewall rule removal: ${{ github.event.client_payload.reqid }}"
          gh api repos/${{ github.repository }}/issues \
            -f title="$TITLE" \
            -f body="$(cat issue_body.md)" \
            -f labels[]="firewall-remove-request"