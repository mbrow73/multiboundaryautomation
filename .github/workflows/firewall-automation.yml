name: Firewall Automation

on:
  issues:
    types:
      - labeled

jobs:
  add-firewall-rule:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Fetch full history to allow committing back
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Validate firewall request
        id: validate
        continue-on-error: true
        run: |
          # Run the validator and capture output. On error the step outcome will be 'failure'.
          python3 .github/scripts/firewall_request_validator.py "$GITHUB_EVENT_PATH" > validation_output.txt
      - name: Post validation errors and close issue
        if: steps.validate.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract errors between the markers printed by the validator
          ERRORS=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' validation_output.txt | sed '/VALIDATION_ERRORS_START\|VALIDATION_ERRORS_END/d')
          # Post a comment summarizing the validation errors
          gh issue comment ${{ github.event.issue.number }} --body $'### ❌ Firewall Request Validation Failed\n\n**Errors:**\n\n'"$(echo "$ERRORS" | sed 's/^/- /')"'\n\n_Your request was closed. Please correct the above and submit again._'
          # Close the issue
          gh issue close ${{ github.event.issue.number }}
      - name: Parse firewall request into auto.tfvars
        if: steps.validate.outcome == 'success'
        run: python3 .github/scripts/boundary_parser.py "$GITHUB_EVENT_PATH"
      - name: Prepare commit and pull request
        if: steps.validate.outcome == 'success'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Stage new or updated firewall request files
          # Determine if there are changes under firewall-requests. Use git diff to detect both new and modified files.
          if git diff --quiet --exit-code -- firewall-requests; then
            echo "No changes detected; skipping PR creation" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          # Stage all changes under firewall-requests
          git add firewall-requests
          # Extract the REQID from the generated file name (e.g. REQ12345.auto.tfvars.json)
          REQID=$(ls firewall-requests | grep -m1 -oE 'REQ[^.]*') || REQID="req"
          echo "REQID=$REQID" >> $GITHUB_ENV
          # Compute a simple summary of the first rule for the PR body
          VAR_FILE="firewall-requests/${REQID}.auto.tfvars.json"
          if command -v jq >/dev/null && [ -f "$VAR_FILE" ]; then
            SRC=$(jq -r '.auto_firewall_rules[0].src_ip_ranges[0]' "$VAR_FILE")
            DEST=$(jq -r '.auto_firewall_rules[0].dest_ip_ranges[0]' "$VAR_FILE")
            PROTOCOL=$(jq -r '.auto_firewall_rules[0].protocol' "$VAR_FILE")
            PORTS=$(jq -r '.auto_firewall_rules[0].ports' "$VAR_FILE")
            DIR=$(jq -r '.auto_firewall_rules[0].direction' "$VAR_FILE")
            RULE_SUMMARY="$SRC -> $DEST $PROTOCOL $PORTS ($DIR)"
          else
            RULE_SUMMARY="Firewall rules"
          fi
          echo "RULE_SUMMARY=$RULE_SUMMARY" >> $GITHUB_ENV
      - name: Create Pull Request
        if: steps.validate.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: add firewall rules for ${{ env.REQID }} (issue #${{ github.event.issue.number }})"
          branch: "firewall/${{ env.REQID }}"
          base: ${{ github.ref }}
          title: "${{ env.REQID }} – Firewall Rule Request"
          body: |
            This pull request adds firewall rules for request **${{ env.REQID }}**, generated automatically from issue #${{ github.event.issue.number }}.

            **Summary of changes**: `${{ env.RULE_SUMMARY }}`

            The rules are defined in the generated Terraform vars file: `firewall-requests/${{ env.REQID }}.auto.tfvars.json`.

            Please review the new firewall configuration and merge this PR if it looks correct.