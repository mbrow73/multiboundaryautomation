# .github/workflows/process-firewall-request.yml
name: 🔒 Process Firewall Requests
on:
  issues:
    types: [opened, edited, reopened]
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔎 Validate Issue
        id: validate
        run: |
          echo "${{ github.event.issue.body }}" > issue.txt
          python3 .github/scripts/firewall_request_validator.py issue.txt > out.txt || VALID=1
          if [[ "$VALID" == "1" ]]; then
            ERR=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' out.txt | sed /^VALIDATION/d)
            gh issue comment ${{ github.event.issue.number }} --body $'### ❌ Validation failed\n\n'"$ERR"
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi

      - name: 📊 Determine current max priority
        id: max_priority
        shell: bash
        run: |
          mkdir -p firewall-requests
          # Enable nullglob so the array is empty if no files match
          shopt -s nullglob
          files=(firewall-requests/*.auto.tfvars.json)

          if (( ${#files[@]} )); then
            # There are files, compute the max
            M=$(jq -s '[ .[].auto_firewall_rules[].priority ] | max' "${files[@]}")
          else
            # No files yet, default to 999
            M=999
          fi

          # Export to GH Actions
          echo "MAX_PRIORITY=$M" >> $GITHUB_OUTPUT


      - name: 📝 Parse & Write JSON
        id: parse
        run: |
          BODY=$(printf '%s' "${{ github.event.issue.body }}" | tr -d $'\r')
          REQ=$(echo "$BODY" | grep -i "Request ID" | cut -d: -f2- | xargs)
          CAR=$(echo "$BODY" | grep -i CARID | cut -d: -f2- | xargs)
          # split rules...
          # capture only src,dst,port,proto,just → build JSON WITHOUT direction:
          # ... [see previous AWK but drop dir]
          # emit file firewall-requests/${REQ}.auto_tfvars.json

      - name: 🗺️ Map IPs & Infer Direction
        run: |
          python3 .github/scripts/boundary_mapper.py \
            --map-file boundary_map.json \
            --json-file firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json \
            --default-boundary dmz

      - name: ⏫ Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: firewall/${{ steps.parse.outputs.REQ }}-${{ github.event.issue.number }}
          base: main
          title: "Firewall request ${{ steps.parse.outputs.REQ }}"
          body: |
            Rules generated; see firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json
          add-paths: firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json

      - name: 💬 Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              body: `PR created for REQ${{ steps.parse.outputs.REQ }}`
            })

