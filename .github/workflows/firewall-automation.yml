name: üîí Process Firewall Requests

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üîé Validate Issue Format and Data
        id: validate
        shell: bash
        run: |
          echo "${{ github.event.issue.body }}" > issue.txt

          # Duplicate-REQID guard
          REQID=$(grep -i "Request ID" issue.txt | head -1 | cut -d: -f2- | xargs)
          if [ -f firewall-requests/${REQID}.auto.tfvars.json ]; then
            gh issue comment ${{ github.event.issue.number }} --body $'### ‚ùå Duplicate Request ID\n\nThe Request ID **'"${REQID}"'** has already been used. Please choose a new one or use an update request.'
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi

          # Run validator (no direction expected)
          python3 .github/scripts/firewall_request_validator.py issue.txt > validation_output.txt || VALIDATION_FAILED=1
          if [[ "$VALIDATION_FAILED" == "1" ]]; then
            ERRORS=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' validation_output.txt \
                     | sed '/VALIDATION_ERRORS_START\|VALIDATION_ERRORS_END/d' \
                     | sed 's/^/- /')
            gh issue comment ${{ github.event.issue.number }} --body $'### ‚ùå Validation Failed\n\n'"$ERRORS"'\n\n_Your request was closed. Please correct above and retry._'
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Determine current max priority
        id: max_priority
        shell: bash
        run: |
          mkdir -p firewall-requests
          shopt -s nullglob
          files=(firewall-requests/*.auto_tfvars.json)
          if (( ${#files[@]} )); then
            M=$(jq -s '[ .[].auto_firewall_rules[].priority ] | max' "${files[@]}")
          else
            M=999
          fi
          echo "MAX_PRIORITY=$M" >> $GITHUB_OUTPUT

      - name: üìù Parse Issue, Generate JSON & Summary
        id: parse
        shell: bash
        run: |
          set -e
          BODY=$(printf '%s' "${{ github.event.issue.body }}" | tr -d $'\r' | sed -e 's/[\x00-\x1F]//g')
          REQ=$(echo "$BODY" | grep -i "Request ID" | head -1 | cut -d: -f2- | xargs)
          CAR=$(echo "$BODY" | grep -i "CARID"       | head -1 | cut -d: -f2- | xargs)
          MAXP=${{ steps.max_priority.outputs.MAX_PRIORITY }}

          # [ Your existing AWK or parsing logic goes here,
          #   ensuring TFVARS contains a JSON object with
          #   "auto_firewall_rules": [ ... ] and no "direction" field. ]

          mkdir -p firewall-requests
          echo "$TFVARS" | jq '.' > firewall-requests/${REQ}.auto_tfvars.json

          echo "REQ=$REQ"           >> $GITHUB_OUTPUT
          echo "RULE_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY"          >> $GITHUB_OUTPUT
          echo "EOF"               >> $GITHUB_OUTPUT

      - name: üó∫Ô∏è Map IPs to Boundaries & Infer Direction
        shell: bash
        run: |
          python3 .github/scripts/boundary_mapper.py \
            --map-file boundary_map.json \
            --json-file firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json \
            --default-boundary dmz

      - name: ‚è´ Create or Update Pull Request for NetSec
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: |
            [Firewall Automation] New rules for ${{ steps.parse.outputs.REQ }}
          branch: firewall/${{ steps.parse.outputs.REQ }}-${{ github.event.issue.number }}
          title: "Firewall request: ${{ steps.parse.outputs.REQ }} (Issue #${{ github.event.issue.number }})"
          body: |
            **Rule Flow Summary:**
            ${{ steps.parse.outputs.RULE_SUMMARY }}

            _See_ `firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json` _for details._

            Closes #${{ github.event.issue.number }}
          add-paths: |
            firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json
          base: main

      - name: üí¨ Comment PR Link to Issue
        if: steps.cpr.outputs.pull-request-url != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              body: `:robot: PR [#${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }}) created for NetSec review.`
            })
