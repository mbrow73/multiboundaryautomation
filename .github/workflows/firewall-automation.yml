# .github/workflows/process-firewall-request.yml
name: üîí Process Firewall Requests
on:
  issues:
    types: [opened, edited, reopened]
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  process:
    if: contains(github.event.issue.labels.*.name, 'firewall-request')
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üîé Validate Issue
        id: validate
        run: |
          echo "${{ github.event.issue.body }}" > issue.txt
          python3 .github/scripts/firewall_request_validator.py issue.txt > out.txt || VALID=1
          if [[ "$VALID" == "1" ]]; then
            ERR=$(awk '/VALIDATION_ERRORS_START/,/VALIDATION_ERRORS_END/' out.txt | sed /^VALIDATION/d)
            gh issue comment ${{ github.event.issue.number }} --body $'### ‚ùå Validation failed\n\n'"$ERR"
            gh issue close ${{ github.event.issue.number }}
            exit 1
          fi

      - name: üìä Determine current max priority
        id: max_priority
        shell: bash
        run: |
          mkdir -p firewall-requests

          # If any *.auto.tfvars.json exists, compute the max; otherwise default to 999
          if ls firewall-requests/*.auto.tfvars.json 1> /dev/null 2>&1; then
            M=$(jq -s '[ .[].auto_firewall_rules[].priority ] | max' firewall-requests/*.auto_tfvars.json)
          else
            M=999
          fi

          # Export to GH Actions output
          echo "MAX_PRIORITY<<EOF" >> $GITHUB_OUTPUT
          echo "$M"                 >> $GITHUB_OUTPUT
          echo "EOF"                >> $GITHUB_OUTPUT


      - name: üìù Parse & Write JSON
        id: parse
        run: |
          BODY=$(printf '%s' "${{ github.event.issue.body }}" | tr -d $'\r')
          REQ=$(echo "$BODY" | grep -i "Request ID" | cut -d: -f2- | xargs)
          CAR=$(echo "$BODY" | grep -i CARID | cut -d: -f2- | xargs)
          # split rules...
          # capture only src,dst,port,proto,just ‚Üí build JSON WITHOUT direction:
          # ... [see previous AWK but drop dir]
          # emit file firewall-requests/${REQ}.auto_tfvars.json

      - name: üó∫Ô∏è Map IPs & Infer Direction
        run: |
          python3 .github/scripts/boundary_mapper.py \
            --map-file boundary_map.json \
            --json-file firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json \
            --default-boundary dmz

      - name: ‚è´ Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: firewall/${{ steps.parse.outputs.REQ }}-${{ github.event.issue.number }}
          base: main
          title: "Firewall request ${{ steps.parse.outputs.REQ }}"
          body: |
            Rules generated; see firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json
          add-paths: firewall-requests/${{ steps.parse.outputs.REQ }}.auto_tfvars.json

      - name: üí¨ Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              body: `PR created for REQ${{ steps.parse.outputs.REQ }}`
            })

