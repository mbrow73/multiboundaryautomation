name: VPC Service Controls Request

on:
  issues:
    types: [opened, edited]
  repository_dispatch:
    types: [vpc-sc-request]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process_vpc_sc_request:
    runs-on: ubuntu-latest

    steps:
      - name: Check out this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write request to file
        env:
          CLIENT_PAYLOAD: ${{ toJSON(github.event.client_payload) }}
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Convert JSON payload to Markdown using our helper script
            python3 payload_to_markdown.py > issue_body.md
          else
            echo "${{ github.event.issue.body }}" > issue_body.md
          fi

      - name: Install Python dependencies
        run: python -m pip install --quiet pyyaml

      - name: Configure git for cross-repo pushes
        run: |
          git config --global url."https://x-access-token:${{ secrets.CROSS_REPO_TOKEN }}@github.com/".insteadOf https://github.com/

      - name: Run VPC SC request handler
        run: |
          python3 .github/scripts/vpc_sc_request_handler.py \
            --issue-file issue_body.md \
            --router-file router.yml \
            --workdir . \
            --output request_processing.json

      - name: Validate VPC SC request
        id: validate
        run: |
          python3 .github/scripts/validate_vpc_sc_request.py \
            --issue-file issue_body.md \
            --router-file router.yml

      - name: Read actions from summary
        id: read_actions
        run: python3 -c "import json, os; data=json.load(open('request_processing.json')) if os.path.exists('request_processing.json') else {}; print(json.dumps(data.get('actions', [])))"

      - name: Label and comment if invalid
        if: ${{ steps.validate.outputs.valid != 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ERRORS: ${{ steps.validate.outputs.errors }}
        run: |
          gh issue edit ${{ github.event.issue.number }} --add-label "needs fix"
          python3 -c "import json, os; errs=json.loads(os.environ.get('ERRORS','[]')); body='**Validation Issues Detected:**\n' + '\n'.join('- '+e for e in errs); open('comment.md','w').write(body)"
          gh issue comment ${{ github.event.issue.number }} --body "$(cat comment.md)"

      - name: Apply changes and create PRs
        if: ${{ steps.validate.outputs.valid == 'true' && steps.read_actions.outputs.stdout != '[]' }}
        env:
          CROSS_REPO_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: python3 .github/scripts/apply_changes.py --summary request_processing.json

      - name: Build humanâ€‘readable summary
        if: ${{ steps.validate.outputs.valid == 'true' && steps.read_actions.outputs.stdout != '[]' }}
        run: |
          python3 - <<'EOF' > summary.md
          import json, textwrap
          data = json.load(open('request_processing.json'))
          lines = []
          lines.append(f"### VPC Service Controls request `{data.get('reqid')}` processed")
          for action in data.get('actions', []):
              lines.append("")
              lines.append(f"**Repository:** `{action['repo']}`")
              lines.append(f"**Branch:** `{action['branch']}`")
              lines.append(f"**Commit message:** {action['commit_message']}")
              lines.append(f"**PR title:** {action['pr_title']}")
              lines.append(f"**PR body:** {action['pr_body']}")
              for change in action.get('changes', []):
                  lines.append(f"- Updated `{change['file']}`")
          print('\n'.join(lines))
          EOF

      - name: Post summary comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh issue comment ${{ github.event.issue.number }} --body "$(cat summary.md)"
