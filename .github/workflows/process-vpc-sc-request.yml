name: VPC Service Controls Request

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process_vpc_sc_request:
    runs-on: ubuntu-latest

    steps:
      - name: Check out this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write issue body to file
        run: |
          echo "${{ github.event.issue.body }}" > issue_body.md

      - name: Install Python dependencies
        run: python -m pip install --quiet pyyaml

      # Rewrite any github.com URL to include your PAT for cross‑repo push
      - name: Configure git for cross‑repo pushes
        run: |
          git config --global url."https://x-access-token:${{ secrets.CROSS_REPO_TOKEN }}@github.com/".insteadOf https://github.com/

      - name: Run VPC SC request handler
        run: |
          python3 .github/scripts/vpc_sc_request_handler.py \
            --issue-file issue_body.md \
            --router-file router.yml \
            --workdir . \
            --output request_processing.json

      - name: Read actions from summary
        id: read_actions
        run: |
          python3 -c "import json; print(json.load(open('request_processing.json')).get('actions', []))"

      - name: Apply changes and create PRs
        if: steps.read_actions.outputs.stdout != '[]'
        env:
          CROSS_REPO_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: |
          python3 - <<'PY'
          import json, os, subprocess
          data = json.load(open('request_processing.json'))
          actions = data.get('actions', [])
          for action in actions:
              repo      = action['repo']
              branch    = action['branch']
              commit    = action['commit_message']
              pr_title  = action['pr_title']
              pr_body   = action['pr_body']
              changes   = action['changes']
              repo_dir  = f"tmp/{repo.replace('/', '_')}"
              subprocess.run(['git', 'clone', f'https://github.com/{repo}.git', repo_dir], check=True)
              subprocess.run(['git', '-C', repo_dir, 'checkout', '-b', branch], check=True)
              for change in changes:
                  path = os.path.join(repo_dir, change['file'])
                  os.makedirs(os.path.dirname(path), exist_ok=True)
                  with open(path, 'w') as f:
                      f.write(change['content'])
              subprocess.run(['git', '-C', repo_dir, 'config', 'user.email', 'bot@example.com'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'config', 'user.name', 'VPC SC Bot'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'add', '.'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'commit', '-m', commit], check=True)
              subprocess.run(['git', '-C', repo_dir, 'push', '--set-upstream', 'origin', branch], check=True)
              subprocess.run(['gh', 'pr', 'create',
                              '--repo', repo,
                              '--head', branch,
                              '--title', pr_title,
                              '--body', pr_body],
                             cwd=repo_dir,
                             check=True)
          PY

      - name: Comment on the issue with summary
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "**VPC Service Controls request processed.**\n\`\`\`json\n$(cat request_processing.json)\n\`\`\`"
