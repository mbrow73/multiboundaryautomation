name: "Process VPC Service Controls Requests"

# This workflow listens for issues created via the VPC Service Controls request template and
# orchestrates updates to the appropriate perimeter repositories.  It parses the issue body,
# generates or reuses accessâ€‘level modules when needed, updates the ingress/egress policies
# in the target perimeter's terraform.auto.tfvars file, commits the changes on a branch and
# opens a pull request.  The workflow posts a summary back to the original issue with
# links to the created PRs.

on:
  issues:
    types: [opened]
    # Only run when the issue has the vpc-sc-request label applied

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process_vpc_sc_request:
    if: contains(github.event.issue.labels.*.name, 'vpc-sc-request')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout hub repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write issue body to file
        id: write_body
        run: echo "${{ github.event.issue.body }}" > issue_body.md

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Process VPC SC request
        id: process
        env:
          GITHUB_TOKEN: ${{ secrets.FIREWALL_API_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # The script reads issue_body.md, router.yml and writes out a JSON summary file
          python3 .github/scripts/vpc_sc_request_handler.py \
            --issue-file issue_body.md \
            --router-file router.yml \
            --workdir ${{ github.workspace }}/tmp \
            --output request_processing.json

      - name: Read processing summary
        id: summary
        run: |
          if [ -f request_processing.json ]; then
            cat request_processing.json
          else
            echo "{}" > request_processing.json
          fi

      - name: Checkout perimeter repo and create PRs
        id: create_prs
        env:
          GITHUB_TOKEN: ${{ secrets.FIREWALL_API_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          python3 - <<'PY'
          import json, os, sys, subprocess, textwrap
          import yaml

          summary_path = 'request_processing.json'
          if not os.path.exists(summary_path):
            print('No summary found; nothing to do.')
            sys.exit(0)
          with open(summary_path) as f:
            data = json.load(f)
          if not data.get('actions'):
            print('No actions to perform.')
            sys.exit(0)

          # For each action we will clone the repo, apply the changes, and create a PR
          for action in data['actions']:
            repo = action['repo']
            branch = action['branch']
            commit_message = action['commit_message']
            pr_title = action['pr_title']
            pr_body = action['pr_body']
            changes = action['changes']

            # Clone the repo
            repo_dir = f"tmp/{repo.replace('/', '_')}"
            subprocess.run(['git', 'clone', f'https://github.com/{repo}.git', repo_dir], check=True)

            # Create and checkout branch
            subprocess.run(['git', 'checkout', '-b', branch], cwd=repo_dir, check=True)

            # Apply changes
            for change in changes:
              file_path = os.path.join(repo_dir, change['file'])
              os.makedirs(os.path.dirname(file_path), exist_ok=True)
              with open(file_path, 'w') as f:
                f.write(change['content'])

            # Commit and push
            subprocess.run(['git', 'config', 'user.email', 'bot@example.com'], cwd=repo_dir, check=True)
            subprocess.run(['git', 'config', 'user.name', 'VPC SC Bot'], cwd=repo_dir, check=True)
            subprocess.run(['git', 'add', '.'], cwd=repo_dir, check=True)
            subprocess.run(['git', 'commit', '-m', commit_message], cwd=repo_dir, check=True)
            subprocess.run(['git', 'push', '--set-upstream', 'origin', branch], cwd=repo_dir, check=True)

            # Create PR using GitHub CLI
            subprocess.run([
                'gh', 'pr', 'create',
                '--repo', repo,
                '--head', branch,
                '--title', pr_title,
                '--body', pr_body
            ], check=True)

          PY

      - name: Comment summary on the issue
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SUMMARY=$(cat request_processing.json || echo '{}')
          echo "**VPC Service Controls request processed.**" > comment.md
          echo >> comment.md
          echo '```json' >> comment.md
          echo "$SUMMARY" >> comment.md
          echo '```' >> comment.md
          gh issue comment ${{ github.event.issue.number }} --body-file comment.md
