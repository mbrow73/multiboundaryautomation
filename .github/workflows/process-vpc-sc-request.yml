name: VPC Service Controls Request

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process_vpc_sc_request:
    runs-on: ubuntu-latest

    steps:
      - name: Check out this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write issue body to file
        run: echo "${{ github.event.issue.body }}" > issue_body.md

      - name: Install dependencies
        run: python -m pip install --quiet pyyaml

      - name: Configure git for crossâ€‘repo pushes
        run: |
          git config --global url."https://x-access-token:${{ secrets.CROSS_REPO_TOKEN }}@github.com/".insteadOf https://github.com/

      - name: Run VPC SC request handler
        run: |
          python3 .github/scripts/vpc_sc_request_handler.py \
            --issue-file issue_body.md \
            --router-file router.yml \
            --workdir . \
            --output request_processing.json

      - name: Read actions from summary
        id: read_actions
        run: |
          if [ -f request_processing.json ]; then
            python3 -c "import json; print(json.load(open('request_processing.json')).get('actions', []))"
          else
            echo "[]"
          fi

      - name: Apply changes and create PRs
        if: steps.read_actions.outputs.stdout != '[]'
        env:
          CROSS_REPO_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: |
          if [ ! -f request_processing.json ]; then
            echo "request_processing.json not found; skipping PR creation."
            exit 0
          fi
          python3 - <<'PY'
          import json, os, re, subprocess

          def append_policies(existing_tfvars, new_ingress, new_egress, justification):
              def merge_array(content, array_name, new_items):
                  pattern = re.compile(rf'({array_name}\\s*=\\s*\\[)(.*?)(\\])', re.DOTALL)
                  m = pattern.search(content)
                  if not m:
                      return content + f"\n{array_name} = [\n" + ",\n".join(new_items) + "\n]\n"
                  before, body, after = m.groups()
                  body = body.rstrip()
                  if body:
                      body += ",\n" + ",\n".join(new_items)
                  else:
                      body = "\n" + ",\n".join(new_items)
                  return content[:m.start()] + before + body + after + content[m.end():]

              content = existing_tfvars
              if new_ingress:
                  items = []
                  for hcl in new_ingress:
                      if justification:
                          for line in justification.split("\\n"):
                              items.append(f"  # {line}")
                      items.extend(["  " + ln for ln in hcl.split("\\n")])
                  content = merge_array(content, "ingress_policies", ["\\n".join(items)])
              if new_egress:
                  items = []
                  for hcl in new_egress:
                      if justification:
                          for line in justification.split("\\n"):
                              items.append(f"  # {line}")
                      items.extend(["  " + ln for ln in hcl.split("\\n")])
                  content = merge_array(content, "egress_policies", ["\\n".join(items)])
              return content

          data = json.load(open('request_processing.json'))
          for action in data.get('actions', []):
              repo      = action['repo']
              branch    = action['branch']
              commit    = action['commit_message']
              pr_title  = action['pr_title']
              pr_body   = action['pr_body']
              changes   = action['changes']
              repo_dir  = f"tmp/{repo.replace('/', '_')}"
              subprocess.run(['git', 'clone', f'https://github.com/{repo}.git', repo_dir], check=True)
              subprocess.run(['git', '-C', repo_dir, 'checkout', '-b', branch], check=True)

              for change in changes:
                  path = os.path.join(repo_dir, change['file'])
                  new_content = change['content']
                  new_blocks  = re.findall(r'\\{\\n.*?\\}', new_content, re.DOTALL)
                  new_ing = []
                  new_eg  = []
                  if "ingress_policies" in new_content:
                      new_ing.extend(new_blocks)
                  if "egress_policies" in new_content:
                      new_eg.extend(new_blocks)
                  existing = ""
                  if os.path.exists(path):
                      with open(path, 'r') as f:
                          existing = f.read()
                  updated = append_policies(existing, new_ing, new_eg, "")
                  os.makedirs(os.path.dirname(path), exist_ok=True)
                  with open(path, 'w') as f:
                      f.write(updated)

              subprocess.run(['git', '-C', repo_dir, 'config', 'user.email', 'bot@example.com'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'config', 'user.name', 'VPC SC Bot'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'add', '.'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'commit', '-m', commit], check=True)
              subprocess.run(['git', '-C', repo_dir, 'push', '--set-upstream', 'origin', branch], check=True)
              subprocess.run(['gh', 'pr', 'create', '--repo', repo, '--head', branch,
                              '--title', pr_title, '--body', pr_body], cwd=repo_dir, check=True)
          PY

      - name: Comment on the issue with summary
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ -f request_processing.json ]; then
            gh issue comment ${{ github.event.issue.number }} --body "$(printf '**VPC Service Controls request processed.**\n```json\n%s\n```' "$(cat request_processing.json)")"
          else
            gh issue comment ${{ github.event.issue.number }} --body "Error: request_processing.json was not generated."
