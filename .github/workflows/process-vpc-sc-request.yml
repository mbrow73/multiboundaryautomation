name: VPC Service Controls Request

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process_vpc_sc_request:
    runs-on: ubuntu-latest

    steps:
      - name: Check out this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write issue body to file
        run: echo "${{ github.event.issue.body }}" > issue_body.md

      - name: Install dependencies
        run: python -m pip install --quiet pyyaml

      - name: Configure git for crossâ€‘repo pushes
        run: |
          git config --global url."https://x-access-token:${{ secrets.CROSS_REPO_TOKEN }}@github.com/".insteadOf https://github.com/

      - name: Run VPC SC request handler
        run: |
          python3 .github/scripts/vpc_sc_request_handler.py \
            --issue-file issue_body.md \
            --router-file router.yml \
            --workdir . \
            --output request_processing.json

      - name: Read actions from summary
        id: read_actions
        run: |
          if [ -f request_processing.json ]; then
            python3 - <<'PY'
            import json
            with open('request_processing.json') as f:
              data = json.load(f)
            print(data.get('actions', []))
            PY
          else
            echo "[]"
          fi

      - name: Apply changes and create PRs
        if: steps.read_actions.outputs.stdout != '[]'
        env:
          CROSS_REPO_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: |
          python3 - <<'PY'
          import json, os, subprocess

          data = json.load(open('request_processing.json'))
          pr_links = []
          for action in data.get('actions', []):
              repo      = action['repo']
              branch    = action['branch']
              commit    = action['commit_message']
              pr_title  = action['pr_title']
              pr_body   = action['pr_body']
              changes   = action['changes']
              repo_dir  = f"tmp/{repo.replace('/', '_')}"
              subprocess.run(['git', 'clone', f'https://github.com/{repo}.git', repo_dir], check=True)
              subprocess.run(['git', '-C', repo_dir, 'checkout', '-b', branch], check=True)

              # Overwrite files with handler output; no merging
              for change in changes:
                  file_path = os.path.join(repo_dir, change['file'])
                  os.makedirs(os.path.dirname(file_path), exist_ok=True)
                  with open(file_path, 'w') as f:
                      f.write(change['content'])

              subprocess.run(['git', '-C', repo_dir, 'config', 'user.email', 'bot@example.com'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'config', 'user.name', 'VPC SC Bot'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'add', '.'], check=True)
              subprocess.run(['git', '-C', repo_dir, 'commit', '-m', commit], check=True)
              subprocess.run(['git', '-C', repo_dir, 'push', '--set-upstream', 'origin', branch], check=True)
              result = subprocess.run(
                  ['gh', 'pr', 'create', '--repo', repo, '--head', branch,
                   '--title', pr_title, '--body', pr_body],
                  cwd=repo_dir, check=True, capture_output=True, text=True
              )
              # The PR URL is usually the last line of stdout; capture it
              pr_links.append(result.stdout.strip())

          # Write PR links to a file
          if pr_links:
              with open('pr_links.txt', 'w') as f:
                  for link in pr_links:
                      f.write(link + '\n')
          PY

      - name: Comment on the issue with summary
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ -f pr_links.txt ]; then
            LINKS=$(sed 's/^/- /' pr_links.txt | tr '\n' '\n')
            gh issue comment ${{ github.event.issue.number }} --body "**VPC Service Controls request processed.**\n\nHere are the pull requests created:\n${LINKS}"
          elif [ -f request_processing.json ]; then
            gh issue comment ${{ github.event.issue.number }} --body "$(printf '**VPC Service Controls request processed.**\n```json\n%s\n```' "$(cat request_processing.json)")"
          else
            gh issue comment ${{ github.event.issue.number }} --body "Error: request_processing.json was not generated."
          fi
